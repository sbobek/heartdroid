package haquna;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.util.Date;

import heart.alsvfd.Formulae;
import heart.alsvfd.Formulae.Builder;
import heart.xtt.Attribute;
import heart.xtt.Decision;
import heart.xtt.Rule;
import heart.xtt.Table;
import heart.xtt.Type;
import heart.xtt.XTTModel;

public class XttModelUtils {
	
	public static void saveToFile(XTTModel model, String path) throws FileNotFoundException, UnsupportedEncodingException {
			PrintWriter writer = new PrintWriter(path, "UTF-8");
			writer.println("%");
			writer.println("% $" + new Date().toString() + "$" );
			writer.println("%" );
			writer.println("% File generated by HaQuNa model save method" );
			writer.println("%" );
			writer.println("% HeaRT case" );
			writer.println("%" );
			writer.println("%" );
			writer.println("%     Copyright (C) 2006-9 by the HeKatE Project" );
			writer.println("%" );
			writer.println("%     HeaRT has been develped by the HeKatE Project, ");
			writer.println("%     see http://hekate.ia.agh.edu.pl");
			writer.println("%" );
			writer.println("%     This file is part of HeaRT." );
			writer.println("%" );
			writer.println("%     HeaRT is free software: you can redistribute it and/or modify" );
			writer.println("%     it under the terms of the GNU General Public License as published by" );
			writer.println("%     the Free Software Foundation, either version 3 of the License, or" );
			writer.println("%     (at your option) any later version." );
			writer.println("%" );
			writer.println("%     HeaRT is distributed in the hope that it will be useful," );
			writer.println("%     but WITHOUT ANY WARRANTY; without even the implied warranty of" );
			writer.println("%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the" );
			writer.println("%     GNU General Public License for more details." );
			writer.println("%" );
			writer.println("%     You should have received a copy of the GNU General Public License" );
			writer.println("%     along with HeaRT.  If not, see <http://www.gnu.org/licenses/>." );
			writer.println("%" );
			writer.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
			
			writer.println();
			writer.println(":-ensure_loaded('heart.pl').");
			writer.println();
			
			writer.print(XttModelUtils.getHMR(model));
			
			writer.close();
			
	}
	
	public static String attributeToHMR(Attribute attr) {
		String HMRCode = "";
		
		HMRCode += "xattr [";
		
		if(attr.getId() != null) {
			HMRCode += ("id: " + attr.getId() + ",\n");
		}
		
		if(attr.getName() != null) {
			HMRCode += ("" + "name: " +  getNameToPrint(attr.getName()) + ",\n");
		}
		
		if(attr.getAbbreviation()!= null) {
			HMRCode += ("       " + "abbrev: " + getNameToPrint(attr.getAbbreviation()) + ",\n");
		}
		
		if(attr.getXTTClass() != null) {
			HMRCode += ("       " + "class: " + attr.getXTTClass() + ",\n");
		}
		
		if(attr.getType().getName() != null) {
			HMRCode += ("       " + "type: " + attr.getType().getName() + ",\n");
		}
		
		if(attr.getComm() != null) {
			HMRCode += ("       " + "comm: " + attr.getComm() + ",\n");
		}
						
		if(attr.getDescription() != null) {
			HMRCode += ("       " + "desc: " + getNameToPrint(attr.getDescription()) + ",\n");
		}
		
		if(HMRCode.lastIndexOf(",") == HMRCode.length()-2) {
			StringBuilder b = new StringBuilder(HMRCode);
			b.replace(HMRCode.lastIndexOf(","), HMRCode.lastIndexOf(",") + 1, "");
			HMRCode = b.toString();
		}
		
		HMRCode += ("      " + "].\n");
		return HMRCode; 	
    }
	
	public static String ruleToHMR(Rule rule) {
		String HMRCode = "";
		
		HMRCode += "xrule ";
		String name = rule.getName().split("/")[0];
		String number = rule.getName().split("/")[1];
		HMRCode += ("'" + name + "'/" + number + ":\n");
		HMRCode += ("      [" );
		
		for(Formulae f : rule.getConditions()) {
			
			if(f != rule.getConditions().getFirst()) {
				HMRCode += "       ";
			}
			String rhs = f.getRHS().toString();
			rhs = rhs.replace(";", "to");
			rhs = rhs.replace("<", "");
			rhs = rhs.replace(">", "");
			HMRCode += (f.getLHS().toString() + " " + f.getOp().toString().toLowerCase() + " " + rhs);
			
			if(f != rule.getConditions().getLast()) {
				HMRCode += ",\n";
			}
		}
		HMRCode += ("]\n");
		HMRCode += "    ==>\n      [";
		for(Decision d : rule.getDecisions()) {
			HMRCode += ("'" + d.getAttribute().getName() + "'" + " set " + d.getDecision());
			
			if(d != rule.getDecisions().getLast()) {
				HMRCode += ",\n";
			}
		}
		HMRCode += ("].\n");
		
		return HMRCode; 	
    }
	
	public static String tableToHMR(Table table) {
		String HMRCode = "";
		HMRCode += "xschm ";
		HMRCode += ("'" + table.getName() + "': [");

		for(Attribute attr : table.getPrecondition()) {			
			HMRCode += (getNameToPrint(attr.getName()));
			
			if(attr != table.getPrecondition().getLast()) {
				HMRCode += ",";
			}
		}
		HMRCode += ("] ==> [");
		for(Attribute attr : table.getConclusion()) {
			HMRCode += (getNameToPrint(attr.getName()));
			
			if(attr != table.getConclusion().getLast()) {
				HMRCode += ",";
			}
		}
		HMRCode += ("].\n");
				
		return HMRCode; 	
    }
	
	public static String typeToHMR(Type type) {
		String HMRCode = "";
		
		HMRCode += "xtype [";
		
		if(type.getId() != null) {
			HMRCode += ("id: " + type.getId() + ",\n");
		}
		
		if(type.getName() != null) {
			HMRCode += ("" + "name: " + type.getName() + ",\n");
		}
		
		if(type.getBase() != null) {
			HMRCode += ("       " + "base: " + type.getBase() + ",\n");
		}
		
		if(type.getLength() != null) {
			HMRCode += ("       " + "length: " + type.getLength() + ",\n");
		}
		
		if(type.getPrecision() != null) {
			HMRCode += ("       " + "precision: " + type.getPrecision() + ",\n");
		}
		
		if(type.getOrdered() != null) {
			HMRCode += ("       " + "ordered: " + type.getOrdered() + ",\n");
		}
		
		if(type.getDomain() != null) {
			
			int sVal;
			int eVal;
			String domain = type.getDomain().toString();
			domain = domain.replace(" ", "");
			if(domain.contains(";")) {
				domain = domain.replace("[<", "");
				domain = domain.replace(">]", "");
				domain = domain.replace(" ", "");
				String s = domain.split(";")[0];
				String e = domain.split(";")[1];
				sVal = new BigDecimal(s).intValue();
				eVal = new BigDecimal(e).intValue();
				
				HMRCode += ("       " + "domain: [" + sVal + " to " + eVal + "],\n");
				
			} else {
			
				domain = domain.replace(";", "to");
				domain = domain.replace("<", "");
				domain = domain.replace(">", "");
				HMRCode += ("       " + "domain: " + domain + ",\n");
			}
		}
				
		if(HMRCode.lastIndexOf(",") == HMRCode.length()-2) {
			StringBuilder b = new StringBuilder(HMRCode);
			b.replace(HMRCode.lastIndexOf(","), HMRCode.lastIndexOf(",") + 1, "");
			HMRCode = b.toString();
		}
		
		HMRCode += ("      " + "].\n");
		return HMRCode; 	
    }
	
	public static String typeBuilderToHMR(Type.Builder type) {
		String HMRCode = "";
		
		HMRCode += "xtype [";
		
		if(type.getId() != null) {
			HMRCode += ("id: " + type.getId() + ",\n");
		}
		
		if(type.getName() != null) {
			HMRCode += ("" + "name: " + type.getName() + ",\n");
		}
		
		if(type.getBase() != null) {
			HMRCode += ("       " + "base: " + type.getBase() + ",\n");
		}
		
		if(type.getLength() != null) {
			HMRCode += ("       " + "length: " + type.getLength() + ",\n");
		}
		
		if(type.getPrecision() != null) {
			HMRCode += ("       " + "precision: " + type.getPrecision() + ",\n");
		}
		
		if(type.getOrdered() != null) {
			HMRCode += ("       " + "ordered: " + type.getOrdered() + ",\n");
		}
		
		if(type.getDomain() != null) {
			
			int sVal;
			int eVal;
			String domain = type.getDomain().toString();
			domain = domain.replace(" ", "");
			if(domain.contains(";")) {
				domain = domain.replace("[<", "");
				domain = domain.replace(">]", "");
				domain = domain.replace(" ", "");
				String s = domain.split(";")[0];
				String e = domain.split(";")[1];
				sVal = new BigDecimal(s).intValue();
				eVal = new BigDecimal(e).intValue();
				
				HMRCode += ("       " + "domain: [" + sVal + " to " + eVal + "],\n");
				
			} else {
			
				domain = domain.replace(";", "to");
				domain = domain.replace("<", "");
				domain = domain.replace(">", "");
				HMRCode += ("       " + "domain: " + domain + ",\n");
			}
		}
				
		if(HMRCode.lastIndexOf(",") == HMRCode.length()-2) {
			StringBuilder b = new StringBuilder(HMRCode);
			b.replace(HMRCode.lastIndexOf(","), HMRCode.lastIndexOf(",") + 1, "");
			HMRCode = b.toString();
		}
		
		HMRCode += ("      " + "].\n");
		return HMRCode; 	
    }
	
	public static String attributeBuilderToHMR(Attribute.Builder attr) {
		String HMRCode = "";
		
		HMRCode += "xattr [";
		
		if(attr.getId() != null) {
			HMRCode += ("id: " + attr.getId() + ",\n");
		}
		
		if(attr.getName() != null) {
			HMRCode += ("" + "name: " +  getNameToPrint(attr.getName()) + ",\n");
		}
		
		if(attr.getAbbreviation()!= null) {
			HMRCode += ("       " + "abbrev: " + getNameToPrint(attr.getAbbreviation()) + ",\n");
		}
		
		if(attr.getXTTClass() != null) {
			HMRCode += ("       " + "class: " + attr.getXTTClass() + ",\n");
		}
		
		if(attr.getTypeName() != null) {
			HMRCode += ("       " + "type: " + attr.getTypeName() + ",\n");
		}
		
		if(attr.getComm() != null) {
			HMRCode += ("       " + "comm: " + attr.getComm() + ",\n");
		}
						
		if(attr.getDescription() != null) {
			HMRCode += ("       " + "desc: " + getNameToPrint(attr.getDescription()) + ",\n");
		}
		
		if(HMRCode.lastIndexOf(",") == HMRCode.length()-2) {
			StringBuilder b = new StringBuilder(HMRCode);
			b.replace(HMRCode.lastIndexOf(","), HMRCode.lastIndexOf(",") + 1, "");
			HMRCode = b.toString();
		}
		
		HMRCode += ("      " + "].\n");
		return HMRCode; 	
    }
	
	public static String tableBuilderToHMR(Table.Builder table) {
		String HMRCode = "";
		HMRCode += "xschm ";
		HMRCode += ("'" + table.getName() + "': [");

		for(String attr : table.getConditionalAttributesNames()) {			
			HMRCode += (getNameToPrint(attr));
			
			if(attr != table.getConditionalAttributesNames().getLast()) {
				HMRCode += ",";
			}
		}
		HMRCode += ("] ==> [");
		for(String attr : table.getDecisiveAttributesNames()) {
			HMRCode += (getNameToPrint(attr));
			
			if(attr != table.getDecisiveAttributesNames().getLast()) {
				HMRCode += ",";
			}
		}
		HMRCode += ("].\n");
				
		return HMRCode; 	
    }
	
	public static String ruleBuilderToHMR(Rule.Builder rule) {
		String HMRCode = "";
		
		HMRCode += "xrule ";
		String name = rule.getRuleId().getName();
		int number = rule.getRuleId().orderNumber;
		HMRCode += ("'" + name.split("/")[0] + "'/" + number + ":\n");
		HMRCode += ("      [" );
		
		for(Builder f : rule.getIncompleteConditions()) {
			
			if(f != rule.getIncompleteConditions().getFirst()) {
				HMRCode += "       ";
			}
			String rhs = f.getRHS().toString();
			rhs = rhs.replace(";", "to");
			rhs = rhs.replace("<", "");
			rhs = rhs.replace(">", "");
			HMRCode += (f.getLHS().toString() + " " + f.getOp().toString().toLowerCase() + " " + rhs);
			
			if(f != rule.getIncompleteConditions().getLast()) {
				HMRCode += ",\n";
			}
		}
		HMRCode += ("]\n");
		HMRCode += "    ==>\n      [";
		for(Decision.Builder d : rule.getIncompleteDecisions()) {
			HMRCode += ("'" + d.getAttributeName() + "'" + " set " + d.getIncompleteDecision());
			
			if(d != rule.getIncompleteDecisions().getLast()) {
				HMRCode += ",\n";
			}
		}
		HMRCode += ("].\n");
		
		return HMRCode; 	
    }
	
	public static String getNameToPrint(String name) {
		if(name.matches("(.*)[{|}| ](.*)")) {
			return ("'" + name + "'");
		
		} else {
			return name;
		
		}
	}
	
	public static String getHMR(XTTModel model) {
		String HMRCode = "";
		
		HMRCode += ("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TYPES DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%\n");
		HMRCode += ("\n");
		for(Type type : model.getTypes()) {
			HMRCode += (typeToHMR(type) + "\n");
		}
		
		HMRCode += ("%%%%%%%%%%%%%%%%%%%%%%%%% ATTRIBUTES DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%\n");
		HMRCode += ("\n");
		for(Attribute attr : model.getAttributes()) {
			HMRCode += (attributeToHMR(attr) + "\n");
		}
		
		HMRCode += ("%%%%%%%%%%%%%%%%%%%%%%%% TABLE SCHEMAS DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%\n");
		HMRCode += ("\n");
		for(Table table : model.getTables()) {
			HMRCode += (tableToHMR(table) + "\n");
		}
		
		HMRCode += ("%%%%%%%%%%%%%%%%%%%%%%%%%%%% RULES DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%\n");
		HMRCode += ("\n");
		for(Table table : model.getTables()) {
			for(Rule rule : table.getRules()) {
				HMRCode += (ruleToHMR(rule) + "\n");
			}
		}
		
		return HMRCode;
	}
	
}
